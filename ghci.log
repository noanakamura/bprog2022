GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/noa/bprog2022/.ghci
2022-05-19 15:41:41.701489965
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/noa/bprog2022/.ghci
2022-05-19 15:52:45.969280708
>>> 23+5
28
2022-05-19 15:54:43.012639427
>>> 3+2*5
13
2022-05-19 15:55:06.360819113
>>> （3＋2）＊5

<interactive>:3:1: error: lexical error at character '3'
2022-05-19 15:56:21.846558189
>>> ５ー2

<interactive>:4:1: error: lexical error at character '\65301'
2022-05-19 15:57:26.351460827
>>> 5－2

<interactive>:5:2: error:
    Variable not in scope: (－) :: t0 -> t1 -> t
2022-05-19 15:57:32.26676243
>>> 5-2
3
2022-05-19 15:57:43.473796333
>>> 
2022-05-19 15:58:03.262771119
>>> (3+2)*5
25
2022-05-19 16:00:19.599998026
>>> sqrt2

<interactive>:9:1: error:
    • Variable not in scope: sqrt2
    • Perhaps you meant ‘sqrt’ (imported from Prelude)
2022-05-19 16:01:33.499753427
>>> sqrt 2
1.4142135623730951
2022-05-19 16:01:56.629752424
>>> double 3

<interactive>:11:1: error: Variable not in scope: double :: t0 -> t
2022-05-19 16:02:18.529852529
>>> 
2022-05-19 16:02:38.896137434
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/noa/bprog2022/.ghci
2022-05-26 15:02:10.545610373
>>> maxBound :: Int
9223372036854775807
2022-05-26 15:03:44.584183723
>>> 2 ^

<interactive>:2:4: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-05-26 15:05:51.784190963
>>> 
2022-05-26 15:05:55.208589683
>>> 2 ^63 - 1
9223372036854775807
2022-05-26 15:06:17.015057535
>>> minBound :: Int
-9223372036854775808
2022-05-26 15:06:43.938129607
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int ->Int
   4  double x = x + x
Ok, no modules loaded.
2022-05-26 15:53:20.57004007
>>>  :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-05-26 15:53:20.650582929
>>>  double 3
6
2022-05-26 15:56:33.571906564
>>>  double 123
246
2022-05-26 15:56:48.665995718
>>>  :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/noa/bprog2022/.ghci
2022-06-09 14:55:18.508876849
>>> 2+3*4
14
2022-06-09 14:58:10.732714101
>>> 2+3+4*5
25
2022-06-09 14:59:16.627180419
>>> (2+3)*4
20
2022-06-09 15:00:24.261846672
>>> 
2022-06-09 15:00:43.369825211
>>> :i sqrt
type Floating :: * -> Constraint
class Fractional a => Floating a where
  ...
  sqrt :: a -> a
  ...
  	-- Defined in ‘GHC.Float’
2022-06-09 15:01:05.352767914
>>> sqrt(3^2+4^2)
5.0
2022-06-09 15:04:44.918826542
>>> sqrt(25::Int)

<interactive>:7:1: error:
    • No instance for (Floating Int) arising from a use of ‘sqrt’
    • In the expression: sqrt (25 :: Int)
      In an equation for ‘it’: it = sqrt (25 :: Int)
2022-06-09 15:08:24.489690092
>>> sqrt(25::Double

<interactive>:8:16: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-06-09 15:09:46.440655105
>>> sqrt(25::Double)
5.0
2022-06-09 15:10:19.361902472
>>> 25
25
2022-06-09 15:11:58.469442988
>>> sqrt25

<interactive>:11:1: error:
    • Variable not in scope: sqrt25
    • Perhaps you meant ‘sqrt’ (imported from Prelude)
2022-06-09 15:12:05.318109891
>>> sqrt 25
5.0
2022-06-09 15:12:21.236465379
>>> hoge 25 :: Int

<interactive>:13:1: error: Variable not in scope: hoge :: t0 -> Int
2022-06-09 15:13:35.251184192
>>> head[1,2,3]
1
2022-06-09 15:46:48.263852477
>>> head[3,1,4,1,5]
3
2022-06-09 15:47:20.328965156
>>> head[]
*** Exception: Prelude.head: empty list
2022-06-09 15:49:12.936862341
>>> hoge=[3,1,4,1,5]::[Int]
2022-06-09 15:50:47.4787061
>>> hoge
[3,1,4,1,5]
2022-06-09 15:51:06.119151388
>>> head hoge
3
2022-06-09 15:51:32.927994335
>>> tail hoge
[1,4,1,5]
2022-06-09 15:51:49.427840075
>>> tail[]
*** Exception: Prelude.tail: empty list
2022-06-09 15:52:47.964345148
>>> hoge !! 0
3
2022-06-09 15:55:26.741017328
>>> hoge  2 !! hoge

<interactive>:23:1: error:
    • Couldn't match expected type: t0 -> [a]
                  with actual type: [Int]
    • The function ‘hoge’ is applied to one value argument,
        but its type ‘[Int]’ has none
      In the first argument of ‘(!!)’, namely ‘hoge 2’
      In the expression: hoge 2 !! hoge
    • Relevant bindings include it :: a (bound at <interactive>:23:1)

<interactive>:23:12: error:
    • Couldn't match expected type ‘Int’ with actual type ‘[Int]’
    • In the second argument of ‘(!!)’, namely ‘hoge’
      In the expression: hoge 2 !! hoge
      In an equation for ‘it’: it = hoge 2 !! hoge
2022-06-09 15:55:45.047046328
>>> take 3 hoge
[3,1,4]
2022-06-09 15:56:41.958535916
>>> dorp 3 hoge

<interactive>:25:1: error:
    • Variable not in scope: dorp :: t0 -> [Int] -> t
    • Perhaps you meant ‘drop’ (imported from Prelude)
2022-06-09 15:57:43.890593858
>>> hoge
[3,1,4,1,5]
2022-06-09 15:57:57.205088651
>>> dorp 3 hoge

<interactive>:27:1: error:
    • Variable not in scope: dorp :: t0 -> [Int] -> t
    • Perhaps you meant ‘drop’ (imported from Prelude)
2022-06-09 15:58:07.818595363
>>> drop 3 hoge
[1,5]
2022-06-09 15:58:29.517964303
>>> hoge !!5
*** Exception: Prelude.!!: index too large
2022-06-09 15:59:06.252540053
>>> take10

<interactive>:30:1: error:
    • Variable not in scope: take10
    • Perhaps you meant ‘take’ (imported from Prelude)
2022-06-09 15:59:14.645166271
>>> length hoge
5
2022-06-09 16:01:18.284805694
>>> hoge++hoge
[3,1,4,1,5,3,1,4,1,5]
2022-06-09 16:05:28.453780683
>>> reverse hoge
[5,1,4,1,3]
2022-06-09 16:05:55.883521627
>>> load src/First.hs

<interactive>:34:10: error:
    Not in scope: ‘First.hs’
    No module named ‘First’ is imported.
2022-06-09 16:08:49.743296736
>>> load src/First.hs

<interactive>:35:10: error:
    Not in scope: ‘First.hs’
    No module named ‘First’ is imported.
2022-06-09 16:09:40.386940082
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int ->Int
   4  double x = x + x
Ok, no modules loaded.
2022-06-09 16:10:41.906851184
>>> :load src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-09 16:10:41.946797757
>>> :quit
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/noa/bprog2022/.ghci
2022-06-10 21:59:52.210134123
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int ->Int
   4  double x = x + x
   5  
   6  
   7  quadruple x = double (double x)
Ok, no modules loaded.
2022-06-10 22:00:39.039094582
>>> :load src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-10 22:00:39.128036022
>>> [1 of 1]Compiling First

<interactive>:3:4: error: parse error on input ‘of’
2022-06-10 22:01:40.741149248
>>> [1 of 1] Compiling First

<interactive>:4:4: error: parse error on input ‘of’
2022-06-10 22:03:11.395560122
>>> 
2022-06-10 22:03:46.226419351
>>> quadruple 3
12
2022-06-10 22:04:13.867088188
>>> 
2022-06-10 22:09:35.068681982
>>> :e
   1  module First where
   2  
   3  double :: Int ->Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-10 22:09:46.218711909
>>> :quit
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/noa/bprog2022/.ghci
2022-06-16 15:02:33.465851359
>>> take 3 [3,1,4,1,5]
[3,1,4]
2022-06-16 15:04:59.060298053
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int ->Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
Ok, no modules loaded.
2022-06-16 15:10:48.232158415
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:10:48.283406162
>>> double

<interactive>:4:1: error:
    • No instance for (Show (Int -> Int)) arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-06-16 15:12:58.514336823
>>> take (double 2) [1,2,3,4,5]
[1,2,3,4]
2022-06-16 15:15:32.595708464
>>> [1 .. 10]
[1,2,3,4,5,6,7,8,9,10]
2022-06-16 15:21:00.258122851
>>> :e
   1  module First where
   2  
   3  double :: Int ->Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:21:11.048486641
>>> factorial

<interactive>:8:1: error:
    • No instance for (Show (Integer -> Integer))
        arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-06-16 15:22:02.742362772
>>> factorial 3
6
2022-06-16 15:22:29.517878109
>>> factorial 4
24
2022-06-16 15:22:51.516173798
>>> :e
   1  module First where
   2  
   3  double :: Int ->Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
Ok, one module loaded.
2022-06-16 15:28:17.965702075
>>> :e
   1  module First where
   2  
   3  double :: Int ->Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  ave :: [Int] -> Int
  13  ave xs = div (sum xs) (length xs)
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:40:05.892277299
>>> average [1,2,3,4,5]

<interactive>:13:1: error:
    Variable not in scope: average :: [a0] -> t
2022-06-16 15:40:56.916965583
>>> 
2022-06-16 15:45:18.713790562
>>> ave [1,2,3,4,5]
3
2022-06-16 15:45:35.547157755
>>> :e
   1  module First where
   2  
   3  double :: Int ->Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:47:45.852793569
>>> average [1,2,3,4,5]
3
2022-06-16 15:48:18.329793163
>>> :t take 3 [1,2,3,4,5]
take 3 [1,2,3,4,5] :: Num a => [a]
2022-06-16 15:49:52.686794022
>>> init [1 .. 5]
[1,2,3,4]
2022-06-16 16:07:05.067687892
>>> :e
   1  module First where
   2  
   3  double :: Int ->Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs) = x : (init xs)
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 16:14:31.748914741
>>> myinit [1 .. 5]
[1,2,3,4]
2022-06-16 16:14:47.488385215
>>> myinit []
*** Exception: src/First.hs:(19,1)-(20,29): Non-exhaustive patterns in function myinit

2022-06-16 16:14:59.624350408
>>> :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/noa/bprog2022/.ghci
2022-06-23 14:56:33.104762676
>>> :i Num
type Num :: * -> Constraint
class Num a where
  (+) :: a -> a -> a
  (-) :: a -> a -> a
  (*) :: a -> a -> a
  negate :: a -> a
  abs :: a -> a
  signum :: a -> a
  fromInteger :: Integer -> a
  {-# MINIMAL (+), (*), abs, signum, fromInteger, (negate | (-)) #-}
  	-- Defined in ‘GHC.Num’
instance Num NominalDiffTime
  -- Defined in ‘time-1.9.3:Data.Time.Clock.Internal.NominalDiffTime’
instance Num DiffTime
  -- Defined in ‘time-1.9.3:Data.Time.Clock.Internal.DiffTime’
instance Num Word -- Defined in ‘GHC.Num’
instance Num Integer -- Defined in ‘GHC.Num’
instance Num Int -- Defined in ‘GHC.Num’
instance Num Float -- Defined in ‘GHC.Float’
instance Num Double -- Defined in ‘GHC.Float’
2022-06-23 14:56:46.614485658
>>> 1==2
False
2022-06-23 15:06:19.947187747
>>> 1<2
True
2022-06-23 15:06:28.263838826
>>> 1<1
False
2022-06-23 15:06:36.476135076
>>> 1<=2
True
2022-06-23 15:06:49.523308241
>>> 1>=2
False
2022-06-23 15:06:58.584612061
>>> 1>-2

<interactive>:7:2: error:
    • Variable not in scope: (>-) :: t0 -> t1 -> t
    • Perhaps you meant one of these:
        ‘-’ (imported from Prelude), ‘>=’ (imported from Prelude),
        ‘>>’ (imported from Prelude)
2022-06-23 15:07:19.614878993
>>> 'a' < 'b'
True
2022-06-23 15:11:35.191615266
>>> 'a' < 'B'
False
2022-06-23 15:11:58.819532072
>>> '' <''

<interactive>:10:1: error:
    Parser error on `''`
    Character literals may not be empty
2022-06-23 15:12:12.587441628
>>> '' <'a'

<interactive>:11:1: error:
    Parser error on `''`
    Character literals may not be empty
2022-06-23 15:12:37.330397687
>>> 'ab' < 'b'

<interactive>:12:1: error:
    • Syntax error on 'ab'
      Perhaps you intended to use TemplateHaskell or TemplateHaskellQuotes
    • In the Template Haskell quotation 'ab'
2022-06-23 15:13:00.760512646
>>> 1/=2
True
2022-06-23 15:15:59.476668071
>>> 1/=1
False
2022-06-23 15:16:10.321053287
>>> :info abs
type Num :: * -> Constraint
class Num a where
  ...
  abs :: a -> a
  ...
  	-- Defined in ‘GHC.Num’
2022-06-23 15:30:21.611026101
>>> abs

<interactive>:16:1: error:
    • No instance for (Show (Integer -> Integer))
        arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-06-23 15:30:52.74525082
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/noa/bprog2022/.ghci
2022-06-30 14:59:56.868463082
>>> [x^2:x<-[1..5]]

<interactive>:1:7: error:
    parse error on input ‘<-’
    Perhaps this statement should be within a 'do' block?
2022-06-30 15:01:59.558820301
>>> [x^2|x<-[1..5]]
[1,4,9,16,25]
2022-06-30 15:03:21.721477129
>>> map(^2)[1..55]
[1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400,441,484,529,576,625,676,729,784,841,900,961,1024,1089,1156,1225,1296,1369,1444,1521,1600,1681,1764,1849,1936,2025,2116,2209,2304,2401,2500,2601,2704,2809,2916,3025]
2022-06-30 15:05:35.663296282
>>> map(^2)[1..5]
[1,4,9,16,25]
2022-06-30 15:06:06.042665432
>>> [*^2|x<-[1..5]]

<interactive>:5:2: error:
    A section must be enclosed in parentheses thus: (*^ 2)
2022-06-30 15:12:15.735027976
>>> [x*2:x<-[1..5]]

<interactive>:6:7: error:
    parse error on input ‘<-’
    Perhaps this statement should be within a 'do' block?
2022-06-30 15:12:43.445480662
>>> [x*2|x<-[1..5]

<interactive>:7:15: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-06-30 15:13:12.226784752
>>> [x*2|x<-[1..5]]
[2,4,6,8,10]
2022-06-30 15:13:20.764065988
>>> [x`div`2|x<-[1..5]]
[0,1,1,2,2]
2022-06-30 15:14:01.196003955
>>> [x`divMod`2|x<-[1..5]]
[(0,1),(1,0),(1,1),(2,0),(2,1)]
2022-06-30 15:15:42.603325783
>>> [(x,y)|x<-"abc",<-[4,5]

<interactive>:11:17: error:
    parse error on input ‘<-’
    Perhaps this statement should be within a 'do' block?
2022-06-30 15:21:36.53145466
>>> [(x,y)|x<-"abc",<-y[4,5]

<interactive>:12:17: error:
    parse error on input ‘<-’
    Perhaps this statement should be within a 'do' block?
2022-06-30 15:21:57.301852769
>>> [(x,y)|x<-"abc",y<-[4,5]

<interactive>:13:25: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-06-30 15:22:16.636638867
>>> [(x,y)|x<-"abc",y<-[4,5]]
[('a',4),('a',5),('b',4),('b',5),('c',4),('c',5)]
2022-06-30 15:23:17.778268203
>>> [(x,y)|x<-"abc",y<-[4,5]]
[('a',4),('a',5),('b',4),('b',5),('c',4),('c',5)]
2022-06-30 15:27:15.742374155
>>> :clone
unknown command ':clone'
use :? for help.
2022-06-30 15:28:16.716137907
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int ->Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs) = x : (init xs)
  21  
  22  myconcat :: [[a]] -> [a]
  23  myconcat xss = [ x | xs <- xss, x <- xs]
Ok, no modules loaded.
2022-06-30 15:29:50.076026735
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-30 15:29:50.15910818
>>> [1|_<-[1..5]]
[1,1,1,1,1]
2022-06-30 15:48:27.721733863
>>> mylength ['a'..'z']

<interactive>:20:1: error:
    • Variable not in scope: mylength :: [Char] -> t
    • Perhaps you meant ‘length’ (imported from Prelude)
2022-06-30 15:51:48.559792066
>>> mylength ['a'..'z']

<interactive>:21:1: error:
    • Variable not in scope: mylength :: [Char] -> t
    • Perhaps you meant ‘length’ (imported from Prelude)
2022-06-30 15:52:47.27488348
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int ->Int
   4  double x = x + x
   5  
   6  quadruple :: Int -> Int
   7  quadruple x = double (double x)
   8  
   9  factorial :: Integer -> Integer
  10  factorial n = product [1 .. n]
  11  
  12  average :: [Int] -> Int
  13  average xs = sum xs `div` length xs
  14  
  15  ave :: [Int] -> Int
  16  ave xs = div (sum xs) (length xs)
  17  
  18  myinit :: [a] -> [a]
  19  myinit (x:[]) = []
  20  myinit (x:xs) = x : (init xs)
  21  
  22  myconcat :: [[a]] -> [a]
  23  myconcat xss = [ x | xs <- xss, x <- xs]
  24  
  25  mylength :: [a] -> Int
  26  mylength xs = sum [ 1 | _ <- xs ]
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-30 15:54:40.012409945
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-30 15:54:40.113678345
>>> mylength ['a'..'z']
26
2022-06-30 15:55:21.412511994
>>> ['a'..'z']
"abcdefghijklmnopqrstuvwxyz"
2022-06-30 15:55:46.850579619
>>> ['あ'..'ん']
"\12354\12355\12356\12357\12358\12359\12360\12361\12362\12363\12364\12365\12366\12367\12368\12369\12370\12371\12372\12373\12374\12375\12376\12377\12378\12379\12380\12381\12382\12383\12384\12385\12386\12387\12388\12389\12390\12391\12392\12393\12394\12395\12396\12397\12398\12399\12400\12401\12402\12403\12404\12405\12406\12407\12408\12409\12410\12411\12412\12413\12414\12415\12416\12417\12418\12419\12420\12421\12422\12423\12424\12425\12426\12427\12428\12429\12430\12431\12432\12433\12434\12435"
2022-06-30 15:56:27.731333444
>>> putStrLn it
あぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん
2022-06-30 15:57:00.307549139
>>> :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/noa/bprog2022/.ghci
2022-07-07 16:05:09.032837338
>>> :e src/Caesar.hs
   1  module Caesar where
   2  
   3  import Data.Char
Ok, no modules loaded.
2022-07-07 16:06:14.468531866
>>> :l src/Caesar.hs
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-07 16:06:14.520657434
>>> ord 'A'
65
2022-07-07 16:06:38.688999736
>>> ord 'a'
97
2022-07-07 16:06:50.101696836
>>> import Data.Char
2022-07-07 16:11:12.284907161
>>> :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/noa/bprog2022/.ghci
2022-07-14 22:15:01.827867966
>>> :e src/Caesar where
catn: src/Caesar: openFile: does not exist (No such file or directory)
2022-07-14 22:15:55.183978331
>>> :l src/Caesar where
target ‘where’ is not a module name or a source file
2022-07-14 22:15:55.236866662
>>> :e src/Caesar.hs
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c
Ok, no modules loaded.
2022-07-14 22:16:28.196648294
>>> :l src/Caesar.hs
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 22:16:28.263269294
>>> let2int 'a'
97
2022-07-14 22:17:03.403172869
>>> let2int 'z'
122
2022-07-14 22:17:51.415002713
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 22:19:10.861552059
>>> let2int 'a'
0
2022-07-14 22:19:33.98525408
>>> let2int 'z'
25
2022-07-14 22:19:51.192409811
>>> ord 'a'
97
2022-07-14 22:22:39.117471536
>>> chr 97
'a'
2022-07-14 22:23:35.235507681
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let i = chr (i + ord 'a')
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 22:24:47.798351965
>>> int2let 0
'a'
2022-07-14 22:24:57.976846115
>>> int2let 25
'z'
2022-07-14 22:25:08.217310931
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      | otherwise = c
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 22:32:08.874034737
>>> shift 3'a'
'd'
2022-07-14 22:32:36.012227352
>>> shift (-3) 'd'
'a'
2022-07-14 22:33:02.349196162
>>> shift 3 'z'
'c'
2022-07-14 22:33:35.684728308
>>> shift 3 ' '
' '
2022-07-14 22:35:46.424949059
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      | otherwise = c
  15  
  16  encode :: Int -> (String -> String)
  17  encode n xs = [ shift n x | x <- xs ]
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 22:39:13.285739891
>>> encode 3 "haskell is fun"
"kdvnhoo lv ixq"
2022-07-14 22:39:48.144588113
>>> encode 3 "haskell is fun"
"kdvnhoo lv ixq"
2022-07-14 22:42:57.885514807
>>> it
"kdvnhoo lv ixq"
2022-07-14 22:43:06.639273021
>>> encode (-3) it
"haskell is fun"
2022-07-14 22:43:36.067236031
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      | otherwise = c
  15  
  16  encode :: Int -> (String -> String)
  17  encode n xs = [ shift n x | x <- xs ]
  18  
  19  table :: [Float]
  20  table = [ 8.1, 1.5, 2.8, 4.2, 12.7, 2.2, 2.0, 6.1, 7.0
  21          , 0.2, 0.8, 4.0, 2.4,  6.7, 7.5, 1.9, 0.1, 6.0
  22          , 6.3, 9.0, 2.8, 1.0,  2.4, 0.2, 2.0, 0.1
  23          ]
  24          
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 22:54:10.56077071
>>> length table
26
2022-07-14 22:54:36.357071424
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      | otherwise = c
  15  
  16  encode :: Int -> (String -> String)
  17  encode n xs = [ shift n x | x <- xs ]
  18  
  19  table :: [Float]
  20  table = [ 8.1, 1.5, 2.8, 4.2, 12.7, 2.2, 2.0, 6.1, 7.0
  21          , 0.2, 0.8, 4.0, 2.4,  6.7, 7.5, 1.9, 0.1, 6.0
  22          , 6.3, 9.0, 2.8, 1.0,  2.4, 0.2, 2.0, 0.1
  23          ]
  24  
  25  percent :: Int ->  Int -> Float
  26  percent n m = (fromIntegral n / fromIntegral m) * 100
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 23:00:23.371294012
>>> percent 5 15
33.333336
2022-07-14 23:00:43.684200717
>>> count 's'

<interactive>:29:1: error:
    Variable not in scope: count :: Char -> t
2022-07-14 23:04:11.516683904
>>> :e
   1  module Caesar where
   2  
   3  import Data.Char
   4  
   5  let2int :: Char -> Int
   6  let2int c = ord c - ord 'a'
   7  
   8  int2let :: Int -> Char
   9  int2let n = chr (ord 'a' + n)
  10  
  11  shift :: Int -> (Char -> Char)
  12  shift n c
  13      | isLower c = int2let ((let2int c + n) `mod` 26)
  14      | otherwise = c
  15  
  16  encode :: Int -> (String -> String)
  17  encode n xs = [ shift n x | x <- xs ]
  18  
  19  table :: [Float]
  20  table = [ 8.1, 1.5, 2.8, 4.2, 12.7, 2.2, 2.0, 6.1, 7.0
  21          , 0.2, 0.8, 4.0, 2.4,  6.7, 7.5, 1.9, 0.1, 6.0
  22          , 6.3, 9.0, 2.8, 1.0,  2.4, 0.2, 2.0, 0.1
  23          ]
  24  
  25  percent :: Int ->  Int -> Float
  26  percent n m = (fromIntegral n / fromIntegral m) * 100
  27  
  28  count :: Char -> (String -> Int)
  29  count x xs = length [ x' | x' <- xs, x == x']
[1 of 1] Compiling Caesar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-14 23:04:43.979625872
>>> count 's' "Mississippi"
4
2022-07-14 23:05:18.380045008
>>> :q
Leaving GHCi.
